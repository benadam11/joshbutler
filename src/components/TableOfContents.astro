---
const { links, title } = Astro.props;
---

<div>
  <h4 class="mb-8">{title}</h4>
  <ul class="grid gap-6">
    {
      links.map(({ id, title }: { id: string; title: string }) => (
        <li>
          <a class="text-xl underline" href={`${Astro.url.origin}/books#${id}`}>
            {title}
          </a>
        </li>
      ))
    }
  </ul>
</div>

<style is:global>
  .active {
    font-weight: bold;
  }
</style>

<script is:inline>
  const links = document.querySelectorAll('a[href*="#"]');
  const opts = { threshold: 1, rootMargin: "0px 0px -70% 0px " };

  links?.[0]?.classList.add("active");

  function resetActiveElement(match) {
    if (match) {
      links.forEach((el) => el.classList.remove("active"));
      match.classList.add("active");
    }
  }

  const observerCallback = (entries) => {
    const id = entries.find((entry) => entry.isIntersecting)?.target?.id;
    resetActiveElement(document.querySelector(`a[href$="#${id}"`));
  };

  const observer = new IntersectionObserver(observerCallback, opts);

  document.querySelectorAll(".page-content h4").forEach((el) => {
    observer.observe(el);
  });

  links.forEach((el) => {
    el.onclick = function (e) {
      e.preventDefault();
      const selector = el.getAttribute("href").split("#")[1];
      let target = document.getElementById(selector);
      let offsetPosition = target.offsetTop - 100;
      resetActiveElement(e.target);
      window.scrollTo({
        top: offsetPosition,
        behavior: "smooth",
      });
    };
  });
</script>
